#!/bin/sh

init_flag=0   # Flag for initialization, 0 for false
config_flag=0 # Flag for configuration, 0 for false
init_global=0 # Flag for global initialization, 0 for false

. /usr/share/mamba-githook/utils/logger.sh
. /usr/share/mamba-githook/utils/variables.sh

__make_githooks_dir() {
    ################################################
    # Makes the .githooks.d directory for local git.
    #
    # Returns:
    #   0 if the command is successful, 1 otherwise.
    ################################################
    printf "Create the git hooks directory" "'$LOCAL_GIT_HOOKS_DIR'"
    sudo -u "${ORIG_USER}" mkdir -p "$LOCAL_GIT_HOOKS_DIR" || {
        log_error "Failed to create the git hooks directory" "'$LOCAL_GIT_HOOKS_DIR'"
        return 1
    }
    return 0
}

__copy_template_files_to_local_repo() {
    ################################################
    # Copies the template files to the local repo.
    #
    # Returns:
    #   0 if the command is successful, 1 otherwise.
    ################################################
    printf "Copying template files from" "'$TEMPLATE_DIR'" "to" "'$LOCAL_GIT_HOOKS_DIR'"
    if [ -d "$TEMPLATE_DIR" && -d "$LOCAL_GIT_HOOKS_DIR" ]; then
        sudo -u "${ORIG_USER}" cp -r "$TEMPLATE_DIR" "$LOCAL_GIT_HOOKS_DIR" || {
            log_error "Failed to copy template files to" "'$LOCAL_GIT_HOOKS_DIR'"
            return 1
        }
    else
        log_error "Could not find the template directory" "'$TEMPLATE_DIR'" \
            "or the git hooks directory" "'$LOCAL_GIT_HOOKS_DIR'"
        return 1
    fi
    return 0
}

__make_pre_commit_commands_file_executable() {
    ################################################
    # Makes the pre-commit-commands file executable.
    #
    # Returns:
    #   0 if the command is successful, 1 otherwise.
    ################################################
    if [ -f "$LOCAL_GIT_HOOKS_DIR/$PRE_COMMIT_SAMPLE" ]; then
        sudo -u "${ORIG_USER}" chmod +x "$LOCAL_GIT_HOOKS_DIR/$PRE_COMMIT_SAMPLE" || {
            log_error "Failed to make the" "'$LOCAL_GIT_HOOKS_DIR/$PRE_COMMIT_SAMPLE'" "file executable"
            return 1
        }
    else
        log_error "Could not find the" "'$LOCAL_GIT_HOOKS_DIR/$PRE_COMMIT_SAMPLE'" "file"
        return 1
    fi
    return 0
}

__configure_git_hookspath() {
  ###########################################################
  # Configures the git hookspath to the init.templatedir path
  #
  # Returns:
  #   0 if the command is successful, 1 otherwise.
  ###########################################################
  if [ -d "${MAMBA_GITHOOK_HOOKS_PATH}" ]; then
    sudo -u "${ORIG_USER}" git config --global "${CORE_HOOKSPATH_OPTION}" "${MAMBA_GITHOOK_HOOKS_PATH}" || {
      log_error "Failed to set 'core.hookspath' to '${MAMBA_GITHOOK_HOOKS_PATH}'"
      return 1
    }
  else
    log_error "Could not find the git hooks directory '${MAMBA_GITHOOK_HOOKS_PATH}'"
    return 1
  fi
  return 0
}

init_project() {
  if [ "${init_global}" -eq 1 ]; then
    echo "Initializing mamba-githook globally..."
  else
    echo "Initializing mamba-githook for the project..."
  fi
}

while getopts "cig" opt; do
  case "${opt}" in
  c)
    config_flag=1
    ;;
  i)
    init_flag=1
    ;;
  g)
    init_global=1
    ;;
  \?)
    echo "Invalid option: -${OPTARG}" >&2
    exit 1
    ;;
  esac
done

if [ "${config_flag}" -eq 1 ]; then
  configure_mamba_githook
fi

if [ "${init_flag}" -eq 1 ]; then
  init_project
fi
