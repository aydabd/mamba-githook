#!/bin/sh
################################################################################
# Title: pre-push hook
# Description: This is a sample pre-push hook. Edit this file to add your own
# pre-push commands. This hook is used to check the commit message for a ticket
# reference.
#
# Author: Aydin Abdi
#
# Usage:
#   Add issue reference in the footer of the commit message or in title.
#   Format of the issue reference is:
#       'JIRA: <JIRA-PROJECT-KEY>-<ISSUE-NUMBER>'
#
# Note: The issue reference can be in the footer or in the title of the commit
#       message. The issue reference is case insensitive.
#
# >>>Commit message example 1<<<
# [jira: myproject-1234]-This is a commit message.
# blankspace
# Long commit message body.
#
# >>>Commit message example 2<<<
# This is a commit message.
# blankspace
# long commit message body.
# Jira: myproject-1234
################################################################################
set -e

# Define pattern for JIRA issue
JIRA_PATTERN='[Jj][Ii][Rr][Aa]:\s*[A-Za-z]+-[0-9]+'

# ANSI ncolor code
RED='\033[0;31m'
LIGHT_BLUE='\033[1;34m'
YELLOW='\033[0;33m'
# No color
NC='\033[0m'

# Functions for general logging
logger() {
  timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  ansi_color=$1
  log_level=$2
  shift 2
  # If the terminal supports color, print the message with color
  # otherwise print the message without color.
  test -t 1 && tput colors >/dev/null &&
    printf "%b\n" "${ansi_color}${timestamp}-${log_level}(${0}): $*${NC}" ||
    printf "%b\n" "${timestamp}-${log_level}(${0}): $*"
}

log_info() {
  logger "${LIGHT_BLUE}" INFO "$@"
}

log_warning() {
  logger "${YELLOW}" WARNING "$@"
}

log_error() {
  logger "${RED}" ERROR "$@"
}

__get_current_remote_branch_name() {
  git rev-parse --abbrev-ref --symbolic-full-name @{u} | sed 's/.*\///' # parse last part of the string
}

__get_remote_main_branch_name() {
  git remote show origin | grep 'HEAD branch' | cut -d' ' -f5
}

__is_main_branch() {
  branch_name="$1"
  main_branch_name="$2"

  test "$branch_name" = "$main_branch_name"
}

# Function to check commit messages for a ticket reference
__check_commit_message() {
  ticket_pattern="$1"
  commit_sha="$2"

  commit_message=$(git show -s --format=%B "$commit_sha")

  if ! printf "%s" "$commit_message" | grep -Eq "$ticket_pattern"; then
    log_error "Commit message does not contain a ticket reference."
    log_info "Add issue reference in the footer or in title of the commit message:"
    log_info "JIRA: <JIRA-PROJECT-KEY>-<ISSUE-NUMBER>"
    log_info "If no Jira exists, one can be created on the project."
    return 1
  fi

  log_info "Commit message contains a ticket reference."
}

# Main function to process the commit message
main() {
  ticket_pattern="$1"
  __is_main_branch "$(__get_current_remote_branch_name)" "$(__get_remote_main_branch_name)" && return 0

  while read -r local_ref local_sha remote_ref remote_sha; do
    __check_commit_message "$ticket_pattern" "$local_sha"
  done
}

main "$JIRA_PATTERN"
